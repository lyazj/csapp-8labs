#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	xorq	%rax, %rax	# count = 0 in %rax
	iaddq	$-9, %rdx	# len -= 9
	jle	Loop10End
Loop10:
	mrmovq	0(%rdi), %r8	# val = src[0] in %r8
	mrmovq	8(%rdi), %r9	# val = src[1] in %r9
	mrmovq	16(%rdi), %r10	# val = src[2] in %r10
	mrmovq	24(%rdi), %r11	# val = src[3] in %r11
	mrmovq	32(%rdi), %rcx	# val = src[4] in %rcx

	andq	%r8, %r8
	jle	Loop10_0
	iaddq	$1, %rax
Loop10_0:
	andq	%r9, %r9
	jle	Loop10_1
	iaddq	$1, %rax
Loop10_1:
	andq	%r10, %r10
	jle	Loop10_2
	iaddq	$1, %rax
Loop10_2:
	andq	%r11, %r11
	jle	Loop10_3
	iaddq	$1, %rax
Loop10_3:
	andq	%rcx, %rcx
	jle	Loop10_4
	iaddq	$1, %rax
Loop10_4:
	rmmovq	%r8, 0(%rsi)	# dst[0] = val
	rmmovq	%r9, 8(%rsi)	# dst[1] = val
	rmmovq	%r10, 16(%rsi)	# dst[2] = val
	rmmovq	%r11, 24(%rsi)	# dst[3] = val
	rmmovq	%rcx, 32(%rsi)	# dst[4] = val

	mrmovq	40(%rdi), %r8	# val = src[5] in %r8
	mrmovq	48(%rdi), %r9	# val = src[6] in %r9
	mrmovq	56(%rdi), %r10	# val = src[7] in %r10
	mrmovq	64(%rdi), %r11	# val = src[8] in %r11
	mrmovq	72(%rdi), %rcx	# val = src[9] in %rcx

	andq	%r8, %r8
	jle	Loop10_5
	iaddq	$1, %rax
Loop10_5:
	andq	%r9, %r9
	jle	Loop10_6
	iaddq	$1, %rax
Loop10_6:
	andq	%r10, %r10
	jle	Loop10_7
	iaddq	$1, %rax
Loop10_7:
	andq	%r11, %r11
	jle	Loop10_8
	iaddq	$1, %rax
Loop10_8:
	andq	%rcx, %rcx
	jle	Loop10_9
	iaddq	$1, %rax
Loop10_9:
	rmmovq	%r8, 40(%rsi)	# dst[5] = val
	rmmovq	%r9, 48(%rsi)	# dst[6] = val
	rmmovq	%r10, 56(%rsi)	# dst[7] = val
	rmmovq	%r11, 64(%rsi)	# dst[8] = val
	rmmovq	%rcx, 72(%rsi)	# dst[9] = val

	iaddq	$80, %rdi	# src += 10
	iaddq	$80, %rsi	# dst += 10
	iaddq	$-10, %rdx	# len -= 10
	jg	Loop10
Loop10End:
	iaddq	$5, %rdx	# len += 5
	jle	Loop5End
Loop5:
	mrmovq	0(%rdi), %r8	# val = src[0] in %r8
	mrmovq	8(%rdi), %r9	# val = src[1] in %r9
	mrmovq	16(%rdi), %r10	# val = src[2] in %r10
	mrmovq	24(%rdi), %r11	# val = src[3] in %r11
	mrmovq	32(%rdi), %rcx	# val = src[4] in %rcx

	andq	%r8, %r8
	jle	Loop5_0
	iaddq	$1, %rax
Loop5_0:
	andq	%r9, %r9
	jle	Loop5_1
	iaddq	$1, %rax
Loop5_1:
	andq	%r10, %r10
	jle	Loop5_2
	iaddq	$1, %rax
Loop5_2:
	andq	%r11, %r11
	jle	Loop5_3
	iaddq	$1, %rax
Loop5_3:
	andq	%rcx, %rcx
	jle	Loop5_4
	iaddq	$1, %rax
Loop5_4:
	rmmovq	%r8, 0(%rsi)	# dst[0] = val
	rmmovq	%r9, 8(%rsi)	# dst[1] = val
	rmmovq	%r10, 16(%rsi)	# dst[2] = val
	rmmovq	%r11, 24(%rsi)	# dst[3] = val
	rmmovq	%rcx, 32(%rsi)	# dst[4] = val

	iaddq	$40, %rdi	# src += 5
	iaddq	$40, %rsi	# dst += 5
	iaddq	$-5, %rdx	# len -= 5
	jg	Loop5
Loop5End:
	iaddq	$3, %rdx	# len += 3
	jle	Loop2End
Loop2:
	mrmovq	0(%rdi), %r8	# val = src[0] in %r8
	mrmovq	8(%rdi), %r9	# val = src[1] in %r9

	andq	%r8, %r8
	jle	Loop2_0
	iaddq	$1, %rax
Loop2_0:
	andq	%r9, %r9
	jle	Loop2_1
	iaddq	$1, %rax
Loop2_1:
	rmmovq	%r8, 0(%rsi)	# dst[0] = val
	rmmovq	%r9, 8(%rsi)	# dst[1] = val

	iaddq	$16, %rdi	# src += 2
	iaddq	$16, %rsi	# dst += 2
	iaddq	$-2, %rdx	# len -= 2
	jg	Loop2
Loop2End:
	jl	Loop1End
Loop1:
	mrmovq	0(%rdi), %r8	# val = src[0] in %r8
	andq	%r8, %r8
	jle	Loop1_0
	iaddq	$1, %rax
Loop1_0:
	rmmovq	%r8, 0(%rsi)	# dst[0] = val

	# iaddq	$8, %rdi	# src += 1
	# iaddq	$8, %rsi	# dst += 1
	# iaddq	$-1, %rdx	# len -= 1
	# jge	Loop1
Loop1End:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
