                            | # vim:ft=asm
0x100:                      | 	.pos	0x100
0x100:                      | 	.align 8
0x100:                      | src:
0x100: 0a00000000000000     | 	.quad	0x00a
0x108: b000000000000000     | 	.quad	0x0b0
0x110: 000c000000000000     | 	.quad	0xc00
0x118:                      | dest:
0x118: 1101000000000000     | 	.quad	0x111
0x120: 2202000000000000     | 	.quad	0x222
0x128: 3303000000000000     | 	.quad	0x333
0x200:                      | 	.pos	0x200
0x200:                      | stack:
0x000:                      | 	.pos	0
0x000:                      | start:
0x000: 30f40002000000000000 | 	irmovq	$stack, %rsp
0x00a: 6355                 | 	xorq	%rbp, %rbp
0x00c: 30f20300000000000000 | 	irmovq	$3, %rdx
0x016: 30f61801000000000000 | 	irmovq	$dest, %rsi
0x020: 30f70001000000000000 | 	irmovq	$src, %rdi
0x02a: 803400000000000000   | 	call	copy_block
0x033: 00                   | 	halt
                            | # long copy_block(long *src, long *dst, long len);
                            | # 	src in %rdi, dst in %rsi, len in %rdx
                            | # 	1 in %rbx, 8 in %rbp, val in %rcx
0x034:                      | copy_block:
0x034: 6300                 | 	xorq	%rax, %rax
0x036: 6222                 | 	andq	%rdx, %rdx
0x038: 717a00000000000000   | 	jle	L1
0x041: 30f80800000000000000 | 	irmovq	$8, %r8
0x04b: 30f90100000000000000 | 	irmovq	$1, %r9
0x055:                      | L0:
0x055: 50170000000000000000 | 	mrmovq	0(%rdi), %rcx
0x05f: 6087                 | 	addq	%r8, %rdi
0x061: 40160000000000000000 | 	rmmovq	%rcx, 0(%rsi)
0x06b: 6086                 | 	addq	%r8, %rsi
0x06d: 6310                 | 	xorq	%rcx, %rax
0x06f: 6192                 | 	subq	%r9, %rdx
0x071: 765500000000000000   | 	jg	L0
0x07a:                      | L1:
0x07a: 90                   | 	ret
